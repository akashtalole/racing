[agent]
  interval = "1s"
  flush_interval = "2s"

  ## Log at debug level.
  debug = false
  ## Log only error level messages.
  quiet = false
  
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  urls = ["http://influxdb:8086"]

  ## API token for authentication.
  token = "$INFLUX_TOKEN"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "b4mad"

  ## Destination bucket to write into.
  bucket = "racing"

  ## The value of this tag will be used to determine the bucket.  If this
  ## tag is not set the 'bucket' option is used as the default.
  # bucket_tag = ""

  ## If true, the bucket tag will not be added to the metric.
  # exclude_bucket_tag = false

  ## Timeout for HTTP messages.
  # timeout = "5s"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## HTTP User-Agent
  # user_agent = "telegraf"

  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"

  ## Enable or disable uint support for writing uints influxdb 2.0.
  # influx_uint_support = false

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false


[[outputs.file]]
  files = ["stdout", "/tmp/metrics.out"]

[[inputs.mqtt_consumer]]
  servers = ["tcp://mosquitto:1883"]
  topics = [
    "racing/#"
  ]
  username = "admin"
  password = "admin"
  data_format = "json"
  tag_keys = [
    "vehicleInformation_mCarName"
  ]
  json_string_fields = [
    "vehicleInformation_mCarName",
    "vehicleInformation_mCarClassName",

  ]
  json_time_key = "time"
  json_time_format = "unix"
  json_timezone = "UTC"


  # [[inputs.mqtt_consumer.json_v2]]
  #   measurement_name = "race" # A string that will become the new measurement name
  #   timestamp_path = "time" # A string with valid GJSON path syntax to a valid timestamp (single value)
  #   timestamp_format = "unix" # A string with a valid timestamp format (see below for possible values)
  #   timestamp_timezone = "UTC" # A string with with a valid timezone (see below for possible values)

